import path from 'path';
import { describe, test, expect } from '@jest/globals';

import { MockAgent, MockClient, setGlobalDispatcher } from 'undici';
import { NexusRepositoryClient } from '../NexusRepositoryClient';


const mockAgent = new MockAgent({ connections: 1 });
mockAgent.disableNetConnect();

const IMAGINARY_INSTANCE_URL = 'http://localhost:12345';
const mockClient = new MockClient(IMAGINARY_INSTANCE_URL, { agent: mockAgent });

setGlobalDispatcher(mockClient);


describe('NexusRepositoryClient', () => {
  describe('uploadFile', () => {
    test('should throw error if file does not exist', async () => {
      
      mockClient.intercept({
        method: 'POST',
        path: '/service/rest/v1/components',
        query: {
          repository: 'files'
        }
      }).reply(204);

      const client = new NexusRepositoryClient(IMAGINARY_INSTANCE_URL, 'files');

      await expect(client.uploadFile('/tmp/non-existent-file.txt', 'file.txt')).rejects.toThrow('File does not exist: /tmp/non-existent-file.txt');
    });

    test('should return 204', async () => {
      mockClient.intercept({
        method: 'POST',
        path: '/service/rest/v1/components',
        query: {
          repository: 'files'
        }
      }).reply(204);

      const client = new NexusRepositoryClient(IMAGINARY_INSTANCE_URL, 'files');

      expect(await client.uploadFile(path.join(__dirname, '__fixtures__/file1.txt'), 'file.txt')).toBe('OK');
    });

    test('should throw error if server responds with 401', async () => {
      mockClient.intercept({
        method: 'POST',
        path: '/service/rest/v1/components',
        query: {
          repository: 'files'
        }
      }).reply(401);

      const client = new NexusRepositoryClient(IMAGINARY_INSTANCE_URL, 'files');

      await expect(client.uploadFile(path.join(__dirname, '__fixtures__/file1.txt'), 'file.txt')).rejects.toThrow('Server responded with 401 - Unauthorized. Please check if the username and password are correct.');
    });

    test('should throw error if server responds with 404', async () => {
      mockClient.intercept({
        method: 'POST',
        path: '/service/rest/v1/components',
        query: {
          repository: 'files'
        }
      }).reply(404);

      const client = new NexusRepositoryClient(IMAGINARY_INSTANCE_URL, 'files');

      await expect(client.uploadFile(path.join(__dirname, '__fixtures__/file1.txt'), 'file.txt')).rejects.toThrow("Server responded with 404 - Not Found. Please check if the instance URL is correct and repository 'res-404' exists.");
    });

    test('should throw error if server responds with unknown error', async () => {
      mockClient.intercept({
        method: 'POST',
        path: '/service/rest/v1/components',
        query: {
          repository: 'files'
        }
      }).reply(418);

      const client = new NexusRepositoryClient(IMAGINARY_INSTANCE_URL, 'files');

      await expect(client.uploadFile(path.join(__dirname, '__fixtures__/file1.txt'), 'file.txt')).rejects.toThrow("Server responded with 418\nI'm a teapot");
    });
  });
});
